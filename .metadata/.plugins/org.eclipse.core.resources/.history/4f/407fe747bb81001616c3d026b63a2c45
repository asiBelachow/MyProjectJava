package view;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Observable;
import java.util.Timer;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseWheelListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Text;

import algorithms.maze3DGenerators.Maze3D;
import algorithms.maze3DGenerators.Position;
import algorithms.search.Solution;
import presenter.Properties;
import presenter.PropertiesHandler;
import view.dialogLoader.ClassGUIDialogLoader;
import view.dialogLoader.Maze3DFormDetailes;
import view.widgets.Maze3DWidget;
import view.widgets.MazeDisplayer;


public class GameWindow extends BasicWindow {
	
	//------------------------------Data Members-------------------------//
	
	private Properties properties = null;

	private Clip backGroundMusic = null , s=null;
	
	private MenuItem generateItem , propertiesItem, loadMazeItem,saveMazeItem, exitItem
	, helpItem, instructionItem, aboutItem, dfsSolve,bfsSolve,subMenuItem ,gameItem,stopMusicItem,playMusicItem;
	
	private Button playMusicButton, stopMusicButton , solveButton, hintButton ;
	
	private Timer timer;
	
	private long startTime;
	
	private String mazeName;
	
	private MazeDisplayer mazeDisplayer;
	
	private MouseWheelListener mouseWheelListener;
	
	private KeyListener keyListener;
	
	HashMap<String, Listener> listeners;
	
	
	
	//------------------------------Constructors-------------------------//
	
	public GameWindow(String title, int width, int height) {
		super(title, width, height);
		listeners = new HashMap<String,Listener>();
		properties=null;
		
		
	}
	
	public GameWindow(Properties properties) {
		super(properties.getTitle(), properties.getWidth(),properties.getHeight());
		setProperties(properties);
		listeners = new HashMap<String,Listener>();
	}
	
	//-----------------------------setters and getters-------------------//
	
	public Properties getProperties() {

		return properties;
	}
	
	public void setProperties(Properties properties) {
		this.properties = properties;
	}

	public Clip getBackGroundMusic() {
		return backGroundMusic;
	}

	public void setBackGroundMusic(Clip backGroundMusic) {
		this.backGroundMusic = backGroundMusic;
	}


	
	//-------------------------Functionality-------------------------//

	
	@Override
	protected void initWidgets() {
		initListeners();
		
	shell.setLayout(new GridLayout(2, false));
	

	
    //**************************Menu Bar Items************************************
	//****************************************************************************
		
		Menu menuBar = new Menu(getShell(), SWT.BAR);
		shell.setMenuBar(menuBar);
	//****************************************************************************

		
	//**************************File Menu************************************
	//***********************************************************************
		
		
		  /*----------Add file menu-------------*/
		MenuItem fileItem = new MenuItem(menuBar, SWT.CASCADE);
		fileItem.setText("&File"); //Set text for foe file menu
	//****************************************************************************
		
		//Drop down  for file menu
		Menu fileMenu = new Menu(getShell(), SWT.DROP_DOWN);
		fileItem.setMenu(fileMenu);
	//****************************************************************************
		
		/*----Add element properties to File menu----*/
		propertiesItem = new MenuItem(fileMenu, SWT.PUSH);
		propertiesItem.setText("Settings"); // Listener for load maze
		
	//****************************************************************************	
		
		/*----Add element Load maze to File menu----*/
		loadMazeItem = new MenuItem(fileMenu, SWT.PUSH);
		loadMazeItem.setText("load maze");
		
	//****************************************************************************
		/*----Add element Save maze to File menu----*/
		saveMazeItem = new MenuItem(fileMenu, SWT.PUSH);
		saveMazeItem.setText("Save maze");
		
	//****************************************************************************
		/*----Add element Exit maze to File menu----*/
		exitItem = new MenuItem(fileMenu, SWT.PUSH);
		exitItem.setText("Exit");
		
		
		
	//**************************Game Menu Items************************************
	//****************************************************************************
		
		/*----Add Game menu to the menu bar----*/
		gameItem = new MenuItem(menuBar, SWT.CASCADE);
		gameItem .setText("&Game");
	//****************************************************************************
			
		//Drop down  for game menu
		Menu gameMenu = new Menu(getShell(), SWT.DROP_DOWN);
		gameItem.setMenu(gameMenu);
		
	//****************************************************************************
		
		/*----Add element generate to the game bar----*/
		generateItem = new MenuItem(gameMenu, SWT.PUSH);
		generateItem.setText("Generate maze");
	//****************************************************************************
		
		/*----Add element cascade----*/
		subMenuItem = new MenuItem(gameMenu, SWT.CASCADE);
		subMenuItem.setText("Solve maze by..");
		
	//****************************************************************************
		/*----Add element drop down---*/
		Menu subMenu = new Menu(getShell(), SWT.DROP_DOWN);
		subMenuItem.setMenu(subMenu);
		
	//****************************************************************************
		/*----Add element Solve by BFS algorithm to solve sub menu ---*/
		bfsSolve = new MenuItem(subMenu, SWT.PUSH);
		bfsSolve.setText("Solve by BFS algorithm");
		bfsSolve.setEnabled(false);
		
	//****************************************************************************
		
		/*----Add element Solve by DFS algorithm to solve sub menu ---*/
		dfsSolve = new MenuItem(subMenu, SWT.PUSH);
		dfsSolve.setText("Solve by DFS algorithm");
		dfsSolve.setEnabled(false);
	
	//****************************************************************************	
		/*----Add element Play music to game menu ---*/
		playMusicItem = new MenuItem(gameMenu, SWT.PUSH);
		playMusicItem.setText("Play music");
		playMusicItem.setImage(new Image(display, "data/image/playmusic.png"));
		
	//****************************************************************************	
		/*----Add element Stop music to game menu ---*/
		stopMusicItem = new MenuItem(gameMenu, SWT.PUSH);
		stopMusicItem.setText("Stop music");
		stopMusicItem.setImage(new Image(display, "data/image/stopmusic.png"));
		stopMusicItem.setEnabled(false);
		
		/*----Add Help menu to the menu bar----*/
		Menu helpMenu = new Menu(getShell(), SWT.DROP_DOWN);
	//****************************************************************************	
		
		helpItem = new MenuItem(menuBar, SWT.CASCADE);
		helpItem.setText("&Help");
		helpItem.setMenu(helpMenu);
		
	//****************************************************************************
		/*----Add element instruction to Help menu----*/
		instructionItem = new MenuItem(helpMenu, SWT.PUSH);
		instructionItem.setText("Instructions");
		
	//****************************************************************************	
		/*----Add element about to Help menu----*/
		aboutItem = new MenuItem(helpMenu, SWT.PUSH);
		aboutItem.setText("About");
		
	//****************************************************************************
	//****************************************************************************
		
		
	//**************************Buttons*******************************************
	//****************************************************************************	
		//----Play Music Button----//
		playMusicButton =  new Button(shell, SWT.PUSH);
		playMusicButton.setText("Play music");
		playMusicButton.setLayoutData(new GridData(SWT.FILL, SWT.NONE, false, false,1, 1));
		
		//----Stop Music Button----//
		stopMusicButton =  new Button(shell, SWT.PUSH);
		stopMusicButton.setText("Stop music");
		stopMusicButton.setImage(new Image(display, "data/image/stopmusic.png"));
		stopMusicButton.setLayoutData(new GridData(SWT.FILL, SWT.NONE, false, false,1, 1));
		stopMusicButton.setEnabled(false);

	//******************************************************************************
		
	
		

	
		
	
		stopMusicButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				stopMusic();
				if(!getBackGroundMusic().isRunning())
					stopMusicButton.setEnabled(false);
					playMusicButton.setEnabled(true);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		//Set image for the button
		playMusicButton.setImage(new Image(display, "data/image/playmusic.png"));
		playMusicButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				//Play music after click on the button
				//playMusic(new File("data/music/m1.wav"));
				
				playMusicButton.setEnabled(false);
				stopMusicButton.setEnabled(true);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
	
	
		
		
	
		
		
		
		//----Solve Music Button----//
		Button solve =  new Button(getShell(), SWT.PUSH);
		solve.setText("Solve maze");
		solve.setLayoutData(new GridData(SWT.FILL, SWT.NONE, false, false,1, 1));
		
		
		
		
    
		
		
		
		
		
		
		
		
	
		propertiesItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				ClassGUIDialogLoader dialog = new ClassGUIDialogLoader(shell, SWT.DIALOG_TRIM | SWT.SYSTEM_MODAL,Properties.class, GameWindow.this.properties);
				
				dialog.setSubmitListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						Properties newProperties = (Properties) dialog.getInstance();
						try{
							PropertiesHandler.writeProperties(newProperties, "data/properties/properties.xml");
						}catch (Exception e) {
							new MyMessageBox(getShell(), SWT.ERROR).showMessage(display, "Error", "Couldn't write new properties");
							return;
						}
						
						new MyMessageBox(getShell(), SWT.ICON_INFORMATION).showMessage(getDisplay(), "attention", "please restart the game for the applied changes to take effect");
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {
						// TODO Auto-generated method stub
						
					}
				});
				dialog.showDialog();
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		
		loadMazeItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				FileDialog fd = new FileDialog(getShell(),SWT.OPEN);
				fd.setFilterPath(" ");
				fd.setText("Load Maze File");
				fd.setFilterExtensions("*.maz".split(" "));
				String selectedMaze = fd.open();
				if (selectedMaze != null) {
					String mazeName = selectedMaze.substring(selectedMaze.lastIndexOf("\\") + 1,
							selectedMaze.lastIndexOf("."));
					String commandLine = "load_maze " + selectedMaze + " " + mazeName;
					setChanged();
					notifyObservers(commandLine);
					/*if (cli.getCommandByInput(commandLine) != null)
						setCommandAndNotify(cli.getCommandByInput(commandLine), commandLine.split(" "));*/
				}
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		
		
		saveMazeItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				FileDialog fd = new FileDialog(getShell(),SWT.SAVE);
				fd.setFilterPath(" ");
				fd.setText("Save Maze File");
				fd.setFilterExtensions("*.maz *.xml *.java .*".split(" "));
				
				String selectedMaze = fd.open();
				if(selectedMaze != null){
					String command = "save_maze " + mazeName + " " + selectedMaze;
					setChanged();
					notifyObservers(command);
				}
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		
		
		generateItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
			
				ClassGUIDialogLoader dialog = new ClassGUIDialogLoader(getShell(), SWT.DIALOG_TRIM | SWT.SYSTEM_MODAL, Maze3DFormDetailes.class);
				dialog.setSubmitListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						Maze3DFormDetailes mazeForm = (Maze3DFormDetailes) dialog.getInstance();
						
						// validates fields(not null and in range)
						if (mazeForm != null && mazeForm.getName() != null && !mazeForm.getName().isEmpty()
								&& mazeForm.getLevels() != null && !(mazeForm.getLevels()<1)
								&& mazeForm.getColumns() != null && !(mazeForm.getColumns()<1)
								&& mazeForm.getRows() != null && !(mazeForm.getRows()<1)) {
						
							String command = "generate_maze"+" "+mazeForm.getName()+" "+mazeForm.getLevels()+" "
							+mazeForm.getRows()+ " "+mazeForm.getColumns();
							System.out.println(command);
							setChanged();
							notifyObservers(command);
							mazeName = mazeForm.getName();
						}
						else{
							new MyMessageBox(getShell(), SWT.ERROR).showMessage(getDisplay(), "Error Generateing Maze", "Error!!!\nThere was an error while trying generatring maze. \nPlease try again");
						}
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {
					}
				});
				dialog.showDialog();
			}
		
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {	
			}
		});
		
		
		
		
		
		
		playMusicItem.addListener(SWT.Selection, listeners.get("play_music"));
		
		
		/*playMusicItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				//Play music after click on the button
				playMusic(new File("data/music/m1.wav"),backGroundMusic);
				
				playMusicItem.setEnabled(false);
				stopMusicItem.setEnabled(true);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});*/
		
		stopMusicItem.addListener(SWT.Selection, listeners.get("stop_music"));
		
		
	/*	stopMusicItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				stopMusic();
				if(!getBackGroundMusic().isRunning())
					stopMusicItem.setEnabled(false);
					playMusicItem.setEnabled(true);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});*/
		
	
		instructionItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				StringBuilder sb = new StringBuilder();
				try {
					BufferedReader br = new BufferedReader(new FileReader("data/properties/instruction.txt")) ;
				    String line = br.readLine();
				    while (line != null) {
				        sb.append(line);
				        sb.append(System.lineSeparator());
				        line = br.readLine();
				    }
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "Instrucation", sb.toString());
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});

		
		aboutItem.addSelectionListener(new SelectionListener() {
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				StringBuilder sb = new StringBuilder();
				try {
					BufferedReader br = new BufferedReader(new FileReader("data/properties/about.txt")) ;
					String line = br.readLine();
					while (line != null) {
						sb.append(line);
						sb.append(System.lineSeparator());
						line = br.readLine();
					}
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "About", sb.toString());
			}
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {

			}
		});
	}
	
	
	
	
	private void playMusicInLoop(File file) {

		try {
			backGroundMusic = AudioSystem.getClip();
			AudioInputStream inputStream = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(file)));
			backGroundMusic.open(inputStream);
			// loop infinitely
			backGroundMusic.setLoopPoints(0, -1);
			backGroundMusic.loop(Clip.LOOP_CONTINUOUSLY);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void playMusic(File file,Clip sound){
		try {
			AudioInputStream inputStream = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(file)));
			AudioFormat format = inputStream.getFormat();
			DataLine.Info info = new DataLine.Info(Clip.class, format);
			sound = (Clip) AudioSystem.getLine(info);
			sound.open(inputStream);
			sound.start();
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	/*	// loop infinitely
		sound.setLoopPoints(0, -1);
		backGroundMusic.loop(Clip.LOOP_CONTINUOUSLY);*/
		
		
	}
	
	
	private void stopMusic(){
		if(getBackGroundMusic().isRunning())
			getBackGroundMusic().stop();
		
	}


	@Override
	public void displayMessage(String msg) {
		new MyMessageBox(getShell(), SWT.OK | SWT.ICON_INFORMATION).showMessage(getDisplay(), "Instrucation", msg);
	}

	@Override
	public void notifyMazeIsReady(String name) {
		System.out.println("fghfghaaaaaaaaaaaaaa");
		/*ToolTip tip = new ToolTip(getShell(), SWT.BALLOON | SWT.ICON_INFORMATION);
		System.out.println("tool tip");
		tip.setMessage("Here is a message for the user. When the message is too long it wraps. I should say something cool but nothing comes to my mind.");
		Tray tray = getDisplay().getSystemTray();
		if (tray != null) {
			TrayItem item = new TrayItem(tray, SWT.NONE);
			Image image = new Image(display, "yourFile.gif");
			item.setImage(image);
			tip.setText("Notification from a tray item");
			item.setToolTip(tip);
		} else {
			tip.setText("Notification from anywhere");
			tip.setLocation(400, 400);
		}
		System.out.println("tool tip");
		tip.setVisible(true);*/

		setChanged();
		notifyObservers("display "+name);
		
		//new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "Instrucation", "fghgfh");
		//new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "Maze is ready", name);
		//showMessage("Maze is ready", name);
		
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto- generated method stub
		
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void getCrossSection(int[][] section) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void showDirPath(String str) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void displayMaze(Maze3D maze) {
		display.syncExec(new Runnable() {
			
			@Override
			public void run() {
				System.out.println(maze.getStart().toString());
				System.out.println(maze.getEnd().toString());
				System.out.println(maze.toString());
				mazeDisplayer = new Maze3DWidget(shell, SWT.BORDER | SWT.DOUBLE_BUFFERED,maze);
				mazeDisplayer.setLayoutData(new GridData(SWT.FILL, SWT.NONE, true, true,1, 2));
				mazeDisplayer.setBackgroundImage(new Image(getDisplay(),"data/image/sonicbg.png"));
				
				//mazeDisplayer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
				//mazeDisplayer.setBackgroundImage(new Image(getDisplay(),"data/image/sonicbg.png"));
				//mazeDisplayer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 3));
				//mazeDisplayer.setCharacter(new ImageGameCharacter(mazeDisplayer, SWT.NONE, new Image(getDisplay(), "data/image/Character1.png")));
				mazeDisplayer.setCharacterPosition(maze.getStart());
				
				mazeDisplayer.setWinEvent(new MazeWinEventHandler() {

					@Override
					public void winGame() {
						playMusic(new File("data/music/win_game.wav"), s);
						
						new MyMessageBox(getShell(),SWT.ICON_INFORMATION).showMessage(getDisplay(),"WIN!!!!","Game completed in: " + ((System.currentTimeMillis() - startTime) / 1000) + " seconds");
						
						restart();
					}

					

					
				});
				
				
			
				// maze widget layout
				mazeDisplayer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));

				shell.layout();
				
				startTime = System.currentTimeMillis();
				
				getShell().addMouseWheelListener(mouseWheelListener);
				getShell().addKeyListener(keyListener);
				
				getShell().forceFocus();
				//solveItem.setEnabled(true);
				generateItem.setEnabled(false);
				saveMazeItem.setEnabled(true);
				loadMazeItem.setEnabled(false);
				bfsSolve.setEnabled(true);
				dfsSolve.setEnabled(true);
			}
			
			
			
			
		});
		
		playMusic(new File("data/music/maze_generate.wav"), s);
		
	}

	@Override
	public void displaySolution(Solution<Position> solution) {
		// TODO Auto-generated method stub
		
	}

	public void restart(){
		getShell().removeKeyListener(keyListener);
		getShell().removeMouseWheelListener(mouseWheelListener);

		generateItem.setEnabled(true);
		loadMazeItem.setEnabled(true);
		saveMazeItem.setEnabled(false);
		dfsSolve.setEnabled(false);
		bfsSolve.setEnabled(false);
		mazeDisplayer.setBackgroundImage(new Image(getDisplay(),"data/image/sonicbg.png"));
		
		
	}

	
	
	public void initListeners(){
		
		
		listeners.put("play_music", new Listener() {
			
			@Override
			public void handleEvent(Event arg0) {
				//Play music after click 
				playMusicInLoop(new File("data/music/m1.wav"));
				//playMusic(new File("data/music/m1.wav"),backGroundMusic);
				playMusicItem.setEnabled(false);
				stopMusicButton.setEnabled(false);
				stopMusicItem.setEnabled(true);
				
				
				
			}
		});
		
		
		listeners.put("stop_music", new Listener() {
			
			@Override
			public void handleEvent(Event arg0) {
				stopMusic();
				if(!getBackGroundMusic().isRunning())
					stopMusicItem.setEnabled(false);
					playMusicItem.setEnabled(true);
				
			}
		});
	
		// user mouse wheel listener (zoom in/out)
		mouseWheelListener = new MouseWheelListener() {

			@Override
			public void mouseScrolled(MouseEvent e) {
				// if both ctrl and wheel are being operated
				if ((e.stateMask & SWT.CTRL) != 0)
					mazeDisplayer.setSize(mazeDisplayer.getSize().x + e.count, mazeDisplayer.getSize().y + e.count);

			}
		};
		
		// user key press listener
		keyListener = new KeyListener() {

			@Override
			public void keyReleased(KeyEvent arg0) {
			}

			@Override
			public void keyPressed(KeyEvent e) {
				if (e.keyCode == SWT.ARROW_UP) 
					mazeDisplayer.moveBack();
				else if (e.keyCode == SWT.ARROW_DOWN) 
					mazeDisplayer.moveFront();
				 else if (e.keyCode == SWT.ARROW_RIGHT)
					mazeDisplayer.moveRight();
				 else if (e.keyCode == SWT.ARROW_LEFT)
					mazeDisplayer.moveLeft();
				else if (e.keyCode == SWT.PAGE_UP)
					mazeDisplayer.moveUp();
				else if (e.keyCode == SWT.PAGE_DOWN) {
					mazeDisplayer.moveDown();
				}
			}
		};
		
		
	}
	
	
	


}
