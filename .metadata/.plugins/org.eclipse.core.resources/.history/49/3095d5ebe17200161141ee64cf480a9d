package run;

import algorithms.maze3DGenerators.Maze3DGenerator;
import algorithms.maze3DGenerators.Position;


import java.io.IOException;


import algorithms.demo.Demo;
import algorithms.maze3DGenerators.Maze3D;


public class Run {

	public static void main(String[] args) {
		testMazeGenerator(new SimpleMaze3dGenerator());
		testMazeGenerator(new GrowingTreeGenerator(new GrowingTreeLast()));
		testMazeGenerator(new GrowingTreeGenerator(new GrowingTreeRandom()));
		
		Demo d = new Demo();
		try {
			d.run();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	private static void testMazeGenerator(Maze3DGenerator mg){
		//Prints the time it takes the algorithm to run 
		//System.out.println(mg.measureAlgorithmTime(3,3,3));
		//Generate another 3d maze
		Maze3D maze=mg.generate(3,3,3);
		//Get the maze entrance
		Position p=maze.getStart();
		System.out.println("\nEntrance "+p);
		System.out.println("\nThe maze\n***********************\n"+maze.toString());
		
		//Print the start position 
		//Get all the possible moves from a position 
		String[] moves=maze.getPossibleMovesAsString(p);
		// print the moves 
		System.out.printf("Possible moves: ");
		for(String move : moves)
			System.out.printf(move+" ");
		
		//Prints the maze exit position
		System.out.println("\nExit:  "+maze.getEnd());
		
		try{ 
			//Get 2d cross sections of the 3d maze 
			int[][] maze2dx=maze.getCrossSectionByX(2); 
			System.out.println("\nCross section by X:\n");
			maze.printCrossByAxis(maze2dx);
			int[][] maze2dy=maze.getCrossSectionByY(5); 
			System.out.println("\nCross section by Y:\n");
			maze.printCrossByAxis(maze2dy);
			int[][] maze2dz=maze.getCrossSectionByZ(0); 
			System.out.println("\nCross section by Z:\n");
			maze.printCrossByAxis(maze2dz);
			// this should throw an exception! 
			maze.getCrossSectionByX(-1); 
			
		} catch (IndexOutOfBoundsException e){ 
			System.out.println("good!");  
		}
	}
}
