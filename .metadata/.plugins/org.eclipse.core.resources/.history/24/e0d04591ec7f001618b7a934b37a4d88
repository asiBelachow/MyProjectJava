package view;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Observable;
import java.util.Timer;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseWheelListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.MessageBox;

import algorithms.maze3DGenerators.Maze3D;
import algorithms.maze3DGenerators.Position;
import algorithms.search.Solution;
import presenter.Properties;
import presenter.PropertiesHandler;
import view.dialogLoader.ClassGUIDialogLoader;
import view.dialogLoader.Maze3DFormDetailes;
import view.widgets.GameBoardDisplayAdapter;
import view.widgets.ImageGameCharacter;
import view.widgets.Maze3DWidget;
import view.widgets.CommonMazeWidget;

public class GameWindow extends BasicWindow {
	
	//------------------------------Data Members-------------------------//
	
	private Properties properties;

	private Clip backGroundMusic;
	
	private MenuItem generateItem , propertiesItem, loadMazeItem,saveMazeItem, exitItem , helpItem, solveItem, instructionItem, aboutItem; 
	
	private Button playMusicButton, stopMusicButton;
	
	private Timer timer;
	
	private long startTime;
	
	private String mazeName;
	
	private MyMessageBox msgBox;
	
	private CommonMazeWidget commonMaze;
	
	private MouseWheelListener mouseWheelListener;
	
	private KeyListener keyListener;
	
	private volatile boolean closed = false;
	
	//private MyMessageBox msgBox;
	
	GameBoardDisplayAdapter gameBoard;
	
	
	
	//------------------------------Constructors-------------------------//
	
	public GameWindow(String title, int width, int height) {
		super(title, width, height);
	}
	
	public GameWindow(Properties properties) {
		super(properties.getTitle(), properties.getWidth(),properties.getHeight());
		setProperties(properties);
	}
	
	//-----------------------------setters and getters-------------------//
	
	public Properties getProperties() {

		return properties;
	}
	
	public void setProperties(Properties properties) {
		this.properties = properties;
	}

	public Clip getBackGroundMusic() {
		return backGroundMusic;
	}

	public void setBackGroundMusic(Clip backGroundMusic) {
		this.backGroundMusic = backGroundMusic;
	}


	
	//-------------------------Functionality-------------------------//

	
	@Override
	protected void initWidgets() {
		
		shell.setLayout(new GridLayout(2, false));
	
		// user mouse wheel listener (zoom in/out)
		mouseWheelListener = new MouseWheelListener() {

			@Override
			public void mouseScrolled(MouseEvent e) {
				// if both ctrl and wheel are being operated
				if ((e.stateMask & SWT.CTRL) != 0)
					commonMaze.setSize(commonMaze.getSize().x + e.count, commonMaze.getSize().y + e.count);

			}
		};
		
		
		// user key press listener
				keyListener = new KeyListener() {

					@Override
					public void keyReleased(KeyEvent arg0) {
					}

					@Override
					public void keyPressed(KeyEvent e) {
						if (e.keyCode == SWT.ARROW_UP) {
							commonMaze.moveDown();
						} else if (e.keyCode == SWT.ARROW_DOWN) {
							commonMaze.moveUp();
						} else if (e.keyCode == SWT.ARROW_RIGHT) {
							commonMaze.moveRight();
						} else if (e.keyCode == SWT.ARROW_LEFT) {
							commonMaze.moveLeft();
						} else if (e.keyCode == SWT.PAGE_UP) {
							// play stairs sound
							commonMaze.moveFront();
						} else if (e.keyCode == SWT.PAGE_DOWN) {
							// play downstairs sound
							commonMaze.moveBack();
						}
					}
				};
	
	/*	//----Play Music Button----//
		playMusicButton =  new Button(shell, SWT.PUSH);
		playMusicButton.setText("Play music");
		playMusicButton.setLayoutData(new GridData(SWT.FILL, SWT.NONE, false, false,1, 2));
		
		//Set image for the button
		playMusicButton.setImage(new Image(display, "data/image/playmusic.png"));
		playMusicButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				//Play music after click on the button
				playMusic(new File("data/music/m1.wav"));
				
				playMusicButton.setEnabled(false);
				stopMusicButton.setEnabled(true);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});*/
		
		
	
		
		/*//----Stop Music Button----//
		stopMusicButton =  new Button(shell, SWT.PUSH);
		stopMusicButton.setText("Stop music");
		stopMusicButton.setImage(new Image(display, "data/image/stopmusic.png"));
		stopMusicButton.setLayoutData(new GridData(SWT.FILL, SWT.NONE, false, false,1, 1));
		stopMusicButton.setEnabled(false);
		stopMusicButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				stopMusic();
				if(!getBackGroundMusic().isRunning())
					stopMusicButton.setEnabled(false);
					playMusicButton.setEnabled(true);
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		*/
		
		
		/*//----Solve Music Button----//
		Button solve =  new Button(getShell(), SWT.PUSH);
		solve.setText("Solve maze");
		solve.setLayoutData(new GridData(SWT.FILL, SWT.NONE, false, false,1, 3));*/
		
		
		/*----Menu Bar----*/
		Menu menuBar = new Menu(getShell(), SWT.BAR);
		shell.setMenuBar(menuBar);

		// File button in the bar
		MenuItem fileItem = new MenuItem(menuBar, SWT.CASCADE);
		fileItem.setText("File");

		// Drop down functions for file button
		Menu fileMenu = new Menu(getShell(), SWT.DROP_DOWN);
		fileItem.setMenu(fileMenu);
		
		/*----Add element properties to File menu----*/
		propertiesItem = new MenuItem(fileMenu, SWT.PUSH);
		propertiesItem.setText("Settings"); // Listener for load maze
		propertiesItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				ClassGUIDialogLoader dialog = new ClassGUIDialogLoader(shell, SWT.DIALOG_TRIM | SWT.SYSTEM_MODAL,Properties.class, GameWindow.this.properties);
				
				dialog.setSubmitListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						Properties newProperties = (Properties) dialog.getInstance();
						try{
							PropertiesHandler.writeProperties(newProperties, "data/properties/properties.xml");
						}catch (Exception e) {
							new MyMessageBox(getShell(), SWT.ERROR).showMessage(display, "Error", "Couldn't write new properties");
							return;
						}
						
						new MyMessageBox(getShell(), SWT.ICON_INFORMATION).showMessage(getDisplay(), "attention", "please restart the game for the applied changes to take effect");
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {
						// TODO Auto-generated method stub
						
					}
				});
				dialog.showDialog();
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		/*----Add element Load maze to File menu----*/
		loadMazeItem = new MenuItem(fileMenu, SWT.PUSH);
		loadMazeItem.setText("load maze");
		loadMazeItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				FileDialog fd = new FileDialog(getShell(),SWT.OPEN);
				fd.setFilterPath(" ");
				fd.setText("Load Maze File");
				fd.setFilterExtensions("*.maz".split(" "));
				String selectedMaze = fd.open();
				if (selectedMaze != null) {
					String commandLine = "save maze " + mazeName + " " + selectedMaze;

					/*if (cli.getCommandByInput(commandLine) != null)
						setCommandAndNotify(cli.getCommandByInput(commandLine), commandLine.split(" "));*/
				}
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
			}
		});
		
		/*----Add element Save maze to File menu----*/
		saveMazeItem = new MenuItem(fileMenu, SWT.PUSH);
		saveMazeItem.setText("Save maze");
		saveMazeItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				FileDialog fd = new FileDialog(getShell(),SWT.SAVE);
				fd.setFilterPath(" ");
				fd.setText("Save Maze File");
				fd.setFilterExtensions("*.maz *.xml *.java .*".split(" "));
				
				String selectedMaze = fd.open();
				if(selectedMaze != null){
					//String
				}
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		/*----Add element Exit maze to File menu----*/
		exitItem = new MenuItem(fileMenu, SWT.PUSH);
		exitItem.setText("Exit");
		
		/*----Add Game menu to the menu bar----*/
		MenuItem gameItem = new MenuItem(menuBar, SWT.CASCADE);
		gameItem .setText("Game");
		
		Menu gameMenu = new Menu(getShell(), SWT.DROP_DOWN);
		gameItem.setMenu(gameMenu);
		
		
		
		generateItem = new MenuItem(gameMenu, SWT.PUSH);
		generateItem.setText("Generate maze");
		
		generateItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
			
				ClassGUIDialogLoader dialog = new ClassGUIDialogLoader(getShell(), SWT.DIALOG_TRIM | SWT.SYSTEM_MODAL, Maze3DFormDetailes.class);
				dialog.setSubmitListener(new SelectionListener() {
					
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						Maze3DFormDetailes mazeForm = (Maze3DFormDetailes) dialog.getInstance();
						
						// validates fields(not null and in range)
						if (mazeForm != null && mazeForm.getName() != null && !mazeForm.getName().isEmpty()
								&& mazeForm.getLevels() != null && !(mazeForm.getLevels()<1)
								&& mazeForm.getColumns() != null && !(mazeForm.getColumns()<1)
								&& mazeForm.getRows() != null && !(mazeForm.getRows()<1)) {
						
							String command = "generate_maze"+" "+mazeForm.getName()+" "+mazeForm.getLevels()+" "
							+mazeForm.getRows()+ " "+mazeForm.getColumns();
							System.out.println(command);
							setChanged();
							notifyObservers(command);
							mazeName = mazeForm.getName();
						}
						else{
							new MyMessageBox(getShell(), SWT.ERROR).showMessage(getDisplay(), "Error", "There is an error while trying generatring maze. \nPlease try again");
						}
					}
					
					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {
					}
				});
				dialog.showDialog();
			}
		
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {	
			}
		});
		
		/*----Add element solve maze to Game menu----*/
		solveItem = new MenuItem(gameMenu, SWT.PUSH);
		solveItem.setText("Solve maze");
		
		/*----Add Help menu to the menu bar----*/
		Menu helpMenu = new Menu(getShell(), SWT.DROP_DOWN);
		
		helpItem = new MenuItem(menuBar, SWT.CASCADE);
		helpItem.setText("Help");
		helpItem.setMenu(helpMenu);
		
		/*----Add element instruction to Help menu----*/
		instructionItem = new MenuItem(helpMenu, SWT.PUSH);
		instructionItem.setText("Instructions");
		instructionItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				StringBuilder sb = new StringBuilder();
				try {
					@SuppressWarnings("resource")
					BufferedReader br = new BufferedReader(new FileReader("data/properties/instruction.txt")) ;
				    String line = br.readLine();
				    while (line != null) {
				        sb.append(line);
				        sb.append(System.lineSeparator());
				        line = br.readLine();
				    }
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "Instrucation", sb.toString());
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});

		
		

	}
	
	// user mouse wheel listener (zoom in/out)
	
	
	private void playMusic(File file) {

		try {
			backGroundMusic = AudioSystem.getClip();
			AudioInputStream inputStream = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(file)));
			backGroundMusic.open(inputStream);
			// loop infinitely
			backGroundMusic.setLoopPoints(0, -1);
			backGroundMusic.loop(Clip.LOOP_CONTINUOUSLY);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	private void stopMusic(){
		if(getBackGroundMusic().isRunning())
			getBackGroundMusic().stop();
		
	}


	@Override
	public void displayMessage(String msg) {
		
	}

	@Override
	public void notifyMazeIsReady(String name) {
		System.out.println("fghfghaaaaaaaaaaaaaa");
		setChanged();
		notifyObservers("display "+name);
		
		//new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "Instrucation", "fghgfh");
		//new MyMessageBox(getShell(), SWT.OK).showMessage(getDisplay(), "Maze is ready", name);
		//showMessage("Maze is ready", name);
		
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto- generated method stub
		
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void getCrossSection(int[][] section) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void showDirPath(String str) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void displayMaze(Maze3D maze) {
		display.syncExec(new Runnable() {
			
			@Override
			public void run() {
				
				commonMaze = new Maze3DWidget(shell, SWT.BORDER | SWT.DOUBLE_BUFFERED,maze);
				commonMaze.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
				//commonMaze.setBackgroundImage(new Image(getDisplay(),"data/image/sonicbg.png"));
				//commonMaze.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 3));
				commonMaze.setCharacter(new ImageGameCharacter(commonMaze, SWT.NONE, new Image(getDisplay(), "data/image/sonic_run.gif")));
				commonMaze.setCharacterPosition(maze.getStart());
				
			
				shell.layout();
				
				startTime = System.currentTimeMillis();
				
				getShell().addMouseWheelListener(mouseWheelListener);
				getShell().addKeyListener(keyListener);
				
				getShell().forceFocus();
				solveItem.setEnabled(true);
				generateItem.setEnabled(false);
				saveMazeItem.setEnabled(true);
				loadMazeItem.setEnabled(false);
			}
			
			
			
			
		});
		
		
		
	}

	@Override
	public void displaySolution(Solution<Position> solution) {
		// TODO Auto-generated method stub
		
	}

	/*private void showMessage(String title, String msg) {
		display.syncExec(new Runnable() {

			@Override
			public void run() {

				if (msgBox != null && !closed) {
					msgBox.setText(title);
					msgBox.setMessage(msg);
					msgBox.open();
				}
			}
		});
	}*/
	
	
	


}
