package presenter;


import java.io.IOException;
import java.util.Iterator;
import java.util.Observable;
import algorithms.maze3DGenerators.Maze3D;
import algorithms.maze3DGenerators.Position;
import algorithms.search.Solution;
import commands.Command;
import model.Model;
import view.View;



public class MyPresenter extends AbstractPresenter {

	

	public MyPresenter(Model model, View view) {
		super(model, view);
		
	}

	@Override
	public void setSolution(String solution){
		
		
	}


	@Override
	public void update(Observable o, Object args) {
		String commandLine = (String) args;
		
		String arr[] = commandLine.split(" ");
		String command = arr[0];
		

		if( !commands.containsKey(command)){
				String msg = "You entered unrecognized command (\"" + command+"\") for help enter \"menu\"";
				view.displayMessage(msg);
		}else{
			
			
		}
			
			
			
		
		
	/*	if( o == view ){
			
			Command command = getCommandByInput(temp);
			
			if(command != null){
				try {
					command.doCommmand(temp.split(" "));
				} catch (IOException e) {
					e.printStackTrace();
				}
			}else{
				String msg = "You entered unrecognized command (\"" + temp+"\") for help enter \"menu\"";
				view.displayMessage(msg);
			}
		
		}
		else if(o == model){
			
			
			
			
			
			if(temp.equals("dir"))
				view.displayMessage((String)model.getCommand(temp));
			
			else if(temp.equals("message"))
				view.displayMessage((String)model.getCommand(temp));
			
			else if(temp.equals("cross section"))
				view.getCrossSection((int[][])model.getCommand(temp));
			else if(temp.equals("display maze"))
				view.displayMaze((Maze3D)model.getCommand(temp));
			else if(temp.equals("display solution"))
				view.displaySolution((Solution<Position>)model.getCommand(temp));
			else if(temp.equals("generate maze")){
				System.out.println((String)model.getCommand(temp));
				view.notifyMazeIsReady((String)model.getCommand(temp));
				
			}
		}*/
		
	}
	
	private Command getCommandByInput(String input) {
		boolean commandOk = false;
		String command = null;

		// matching all regular expressions with the given user command
		Iterator<String> iter = commands.keySet().iterator();
		while (iter.hasNext() && !commandOk) {
			command = iter.next();
			commandOk = input.matches(command);
		}
		if (commandOk)
			return commands.get(command);
		else
			return null;

	}
	

}
