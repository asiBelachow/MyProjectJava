package presenter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import view.Command;
import model.Model;
import view.View;

public abstract class AbstractPresenter implements Observer,Presenter {
	
	Model model;
	View view;
	
	
	protected HashMap<String, Command> commands;
	
	//------------------------------Constructors-------------------------//
	
	public AbstractPresenter() {
		initCommands();
		
	}
	
	//-----------------------------setters and getters-------------------//
	
	@Override
	public void setModel(Model m) {
		this.model = m;
	}
	
	@Override
	public void setView(View ui) {
		this.view = ui;
	}
	
	@Override
	public HashMap<String, Command> getCommands() {
		return commands;
	}

	public void setCommands(HashMap<String, Command> commands) {
		this.commands = commands;
	}
	
	//-------------------------Functionality-------------------------//

	@Override
	public void initCommands(){

		this.commands = new HashMap<String, Command>();
		
	
		commands.put("dir [^\n]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.dirPath(param[1]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("generate_maze [A-Za-z0-9]+ [0-9]{1,2} [0-9]{1,2} [0-9]{1,2}", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.generateMaze3D(param[1], Integer.parseInt(param[2]), Integer.parseInt(param[3]), Integer.parseInt(param[4]));
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("display [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.displayMaze(param[1]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		
		
		commands.put("display_cross_section [0-9]{1,2} [A-Za-z0-9]+ [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.CrossSectionByDimention(Integer.parseInt(param[1]), param[2], param[3]);
				
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		
		
		commands.put("save_maze [A-Za-z0-9]+ [^\n]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.saveMaze(param[1], param[2]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("load_maze [^\n]+ [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.loadMaze(param[1], param[2]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("solve [A-Za-z0-9]+ [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.solveMaze(param[1], param[2]);
				
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("display_solution [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.displaySolution(param[1]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
	
		commands.put("list_maze", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.displayListOfAllMaze();
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("menu", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.displayMenu();
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		
		
		commands.put("exit", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				model.exit();	
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
	
	}
	
	@Override
	public abstract void update(Observable o, Object args);


	

}
