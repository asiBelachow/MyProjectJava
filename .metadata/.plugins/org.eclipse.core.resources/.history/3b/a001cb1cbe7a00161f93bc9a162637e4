
package view;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Observable;





public class ObservableCLIView extends AbstractObservableView implements Runnable {
	
	
	
	public ObservableCLIView(BufferedReader in, PrintWriter out) {
		super(in, out);
		// TODO Auto-generated constructor stub
	}

	private static final String EXIT_COMMAND = "exit";
	
	
	private HashMap<String, Command> commandMap;
	
	

	//------------------------------Constructors-------------------------//
	

	
	//-----------------------------setters and getters-------------------//

	

	public HashMap<String, Command> getCommandMap() {
		return commandMap;
	}

	public void setCommandMap(HashMap<String, Command> commandMap) {
		this.commandMap = commandMap;
	}
	
	//-------------------------Functionality-------------------------//
	
	
	
	
	@Override
	public void start(){
		cli.start();
	}
	
	
	

	@Override
	public void run() {
		//Get an input from the client
		System.out.println("*To view commands enter menu");
		System.out.printf("Please enter command: ");
		String buffer = null;;
		try { 
			//get input until the input equals to exit
			while(!(buffer=cli.in.readLine()).equals(EXIT_COMMAND)){
				
				Command com = cli.getCommand(buffer);
				if(com != null){
					String[] param = buffer.split(" ");
					if(param != null)
						data.put(com, param);
					setChanged();
					notifyObservers(com);
				}else
					System.out.println("Unrecognized command " + buffer);
				System.out.printf("Please enter command: ");
				
			}
		}catch (Exception e) {
			close();
		}
		
	}

	@Override
	public Object getCommand(Command command) {
		
		return data.get(command);
	}

	@Override
	public void close() {
		try {
			cli.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}



	@Override
	public void displayMessage(String msg) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notifyMazeIsReady(String name) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		
	}
	

	
}
