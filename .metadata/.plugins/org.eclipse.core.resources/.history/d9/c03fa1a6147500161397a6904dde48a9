package model;



import java.io.IOException;
import java.util.concurrent.ConcurrentHashMap;

import algorithms.maze3DGenerators.GrowingTreeGenerator;
import algorithms.maze3DGenerators.GrowingTreeRandom;
import algorithms.maze3DGenerators.Maze3D;
import algorithms.maze3DGenerators.Position;
import algorithms.search.Solution;
import algorithms.search.State;
import controller.Controller;

/**
 * <h1>class MyCommonModel</h1><p>
 * This class defines the common functionality of the model in MVC architectural pattern</br>
 * Manages the data, logic and rules of the </p>
 * <b>Data structure :</b>
 * <li><b>mapMaze3D</b> - hold the {@link Maze3D} with name</br>
 * <li><b>mapSolution</b> - hold the {@link Solution} of the Maze3D with name</br></br>
 * <b>Data member :</b>
 * <li>{@link Controller}
 * @author Asi Belachow
 * @version 1.0
 * @since 2016-05-09
 */
public abstract class MyCommonModel implements Model {
	
	
	protected ConcurrentHashMap<String,Maze3D> mapMaze3D;
	
	protected ConcurrentHashMap<String,Solution<State<Position>>> mapSolution;
	
	protected Controller controller;
	
	//------------------------------Constructors-------------------------//
	
	/**
	 *<h1>MyCommonModel</h1><p>
	 * <i><ul>MyCommonModel(Controller cont)<i><p>
	 * Initialize a new Model
	 * @param Controller
	 */
	public MyCommonModel(Controller controller) {
		this.controller = controller;
		mapMaze3D = new ConcurrentHashMap<String,Maze3D>();//In
		mapSolution = new ConcurrentHashMap<String,Solution<State<Position>>>();
		
		Maze3D maze = new GrowingTreeGenerator(new GrowingTreeRandom()).generate(5, 5, 5);
		mapMaze3D.put("aaa", maze);
	}
	
	
	//-----------------------------setters and getters-------------------//

	/**
	 * Controller.
	 *<h1>MyCommonModel</h1><p>
	 * <i><ul>MyCommonModel(Controller cont)<i><p>
	 * @return the controller
	 */
	public Controller getController() {
		return controller;
	}

	public void setController(Controller controller) {
		this.controller = controller;
	}



	
	//-------------------------Functionality-------------------------//
	
	/* (non-Javadoc)
	 * @see model.Model#dirPath(java.lang.String)
	 */
	@Override
	public abstract void dirPath(String path);



	/* (non-Javadoc)
	 * @see model.Model#generateMaze3D(java.lang.String, int, int, int)
	 */
	@Override
	public abstract void generateMaze3D(String mazeName, int z, int x, int y);



	/* (non-Javadoc)
	 * @see model.Model#CrossSectionByDimention(int, java.lang.String, java.lang.String)
	 */
	@Override
	public abstract void CrossSectionByDimention(int index, String crossSection,  String mazeName);



	/* (non-Javadoc)
	 * @see model.Model#saveMaze(java.lang.String, java.lang.String)
	 */
	@Override
	public abstract void saveMaze(String mazeName, String path) throws IOException;
	

	/* (non-Javadoc)
	 * @see model.Model#loadMaze(java.lang.String, java.lang.String)
	 */
	@Override
	public abstract void loadMaze(String file, String mazeName) throws IOException;



	/* (non-Javadoc)
	 * @see model.Model#solveMaze(java.lang.String, java.lang.String)
	 */
	@Override
	public abstract void solveMaze(String mazeName, String alg);
	
	/* (non-Javadoc)
	 * @see model.Model#displayMaze(java.lang.String)
	 */
	@Override
	public abstract void displayMaze(String name);
	

	/* (non-Javadoc)
	 * @see model.Model#displaySolution(java.lang.String)
	 */
	@Override
	public abstract void displaySolution(String mazeName);


	/* (non-Javadoc)
	 * @see model.Model#displayListOfAllMaze()
	 */
	@Override
	public abstract void displayListOfAllMaze();
	
	/* (non-Javadoc)
	 * @see model.Model#displayMenu()
	 */
	@Override
	public abstract void displayMenu();


	

	

}
