package presenter;

import java.io.IOException;
import java.util.HashMap;

import allCommands.Close;
import allCommands.Command;
import allCommands.DirPath;
import allCommands.DisplayCrossSectionByDimension;
import allCommands.DisplayMaze;
import allCommands.DisplayMenu;
import allCommands.DisplaySolution;
import allCommands.DisplyListOfAllMaze;
import allCommands.GenerateMaze3D;
import allCommands.LoadMaze;
import allCommands.SaveMaze;
import allCommands.SolveMaze;
import model.Model;
import view.View;

public class CommandManger {
	
	Model model;
	View view;
	
	public CommandManger(Model model, View view) {
		this.model = model;
		this.view =view;
	}
	
	

	public Model getModel() {
		return model;
	}

	public void setModel(Model model) {
		this.model = model;
	}

	public View getView() {
		return view;
	}

	public void setView(View view) {
		this.view = view;
	}
	
	public HashMap<String,Command> getCommandMap(){
		
		HashMap<String, Command> commands = new HashMap<String, Command>();
		commands = new HashMap<String, Command>();

		commands.put("dir [^\n]+", new DirPathCommand());
		commands.put("generate_maze [A-Za-z0-9]+ [0-9]{1,2} [0-9]{1,2} [0-9]{1,2}", new GenerateMazeCommand();
		commands.put("display [A-Za-z0-9]+", new DisplayMazeCommand();
		commands.put("display_cross_section [0-9]{1,2} [A-Za-z0-9]+ [A-Za-z0-9]+", new DisplayCrossSectionByDimension(m));
		commands.put("save_maze [A-Za-z0-9]+ [^\n]+", new SaveMaze(m));
		commands.put("load_maze [^\n]+ [A-Za-z0-9]+", new LoadMaze(m));
		commands.put("solve [A-Za-z0-9]+ [A-Za-z0-9]+", new SolveMaze(m));
		commands.put("display_solution [A-Za-z0-9]+", new DisplaySolution(m));
		commands.put("display_menu", new DisplayMaze(m));
		commands.put("list_maze", new DisplyListOfAllMaze(m));
		commands.put("menu", new DisplayMenu(m));
		commands.put("exit", new Close(m));
		return commands;
		
		
		
		
		
	}
	
	
	
	class GenerateMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.generateMaze3D(param[1], Integer.parseInt(param[2]), Integer.parseInt(param[3]), Integer.parseInt(param[4]));
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	
	class DirPathCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.dirPath(param[1]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class DisplayMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.displayMaze(param[1]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class DisplayCrossSectionCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.CrossSectionByDimention(Integer.parseInt(param[1]), param[2], param[3]);
			
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	
	class SaveMAzeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.saveMaze(param[1], param[2]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class LoadMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.loadMaze(param[1], param[2]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class SolveMazeCommand implements Command{

		@Override
		public void doCommmand(String[] param) throws IOException {
			model.solveMaze(param[1], param[2]);

		}

		@Override
		public String toString() {
			return getClass().getName();
		}
	}
		
	class DisplaySolutionCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.displaySolution(param[1]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class ListNameOfMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.displayListOfAllMaze();
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class DisplayMenuCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.displayMenu();
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class ExitCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.exit();	
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}

}
