
package view;



import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Observable;

import algorithms.maze3DGenerators.Maze3D;


public class ObservableCLIView extends AbstractObservableView {
	
	
	private CLI cli;
	
	//------------------------------Constructors-------------------------//
	
	public ObservableCLIView(BufferedReader in, PrintWriter out) {
		super(in, out);
		cli = new CLI(in, out);
		cli.addObserver(this);
	}


	//-----------------------------setters and getters-------------------//

	public CLI getCli() {
		return cli;
	}


	public void setCli(CLI cli) {
		this.cli = cli;
	}

	
	
	//-------------------------Functionality-------------------------//
	

	
	@Override
	public void start(){
		cli.start();
	}
	
	
	@Override
	public void update(Observable o, Object arg) {
		if (o == cli) {
			setChanged();
			notifyObservers(arg);
		}
		
	}
	

	@Override
	public void close() {
		try {
			cli.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}


	@Override
	public void displayMessage(String msg) {
		System.out.println(msg);
		
	}

	@Override
	public void notifyMazeIsReady(String name) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void showDirPath(String str) {
		System.out.println(str);
		
	}


	@Override
	public void getCrossSection(int[][] section) {
		StringBuilder sb = new StringBuilder();
		for (int i=0;i<section.length;i++){
			for( int j=0; j<section[i].length;j++){
				sb.append(section[i][j]+"   "); 
			}
			sb.append("\n");	
		}
		System.out.println(sb.toString());
		
	}


	@Override
	public void displayMaze(Maze3D maze) {
		System.out.println("Maze entrace: "+ maze.getStart());
		System.out.println("Maze exit: "+maze.getEnd());
		System.out.println(maze.toString());
		
	}

	
	
}
