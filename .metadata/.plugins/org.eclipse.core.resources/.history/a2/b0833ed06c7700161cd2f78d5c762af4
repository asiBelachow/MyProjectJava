package presenter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;

import commands.Close;
import commands.Command;
import commands.DirPath;
import commands.DisplayCrossSectionByDimension;
import commands.DisplayMaze;
import commands.DisplayMenu;
import commands.DisplaySolution;
import commands.DisplyListOfAllMaze;
import commands.GenerateMaze3D;
import commands.LoadMaze;
import commands.SaveMaze;
import commands.SolveMaze;
import model.Model;
import view.View;

public abstract class MyCommonPresenter implements Observer,Presenter {
	
	Model m;
	View ui;
	
	
	protected HashMap<String, Command> commands;
	
	//------------------------------Constructors-------------------------//
	
	public MyCommonPresenter(Model m, View ui) {
		this.m = m;
		this.ui = ui;
	
		setCommands();
		
	}
	
	//-------------------------Functionality-------------------------//

	@Override
	public abstract void update(Observable o, Object args);
	
	
	public HashMap<String, Command> setCommands(){

		this.commands = new HashMap<String, Command>();
		
	
		commands.put("dir [^\n]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.dirPath(param[1]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("generate_maze [A-Za-z0-9]+ [0-9]{1,2} [0-9]{1,2} [0-9]{1,2}", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.generateMaze3D(param[1], Integer.parseInt(param[2]), Integer.parseInt(param[3]), Integer.parseInt(param[4]));
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("display [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.displayMaze(param[1]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		
		
		commands.put("display_cross_section [0-9]{1,2} [A-Za-z0-9]+ [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.CrossSectionByDimention(Integer.parseInt(param[1]), param[2], param[3]);
				
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		
		
		commands.put("save_maze [A-Za-z0-9]+ [^\n]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.saveMaze(param[1], param[2]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("load_maze [^\n]+ [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.loadMaze(param[1], param[2]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("solve [A-Za-z0-9]+ [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.solveMaze(param[1], param[2]);
				
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("display_solution [A-Za-z0-9]+", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.displaySolution(param[1]);
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
	
		commands.put("list_maze", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.displayListOfAllMaze();
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("menu", new Command() {
			
			@Override
			public void doCommmand(String[] param) throws IOException {
				m.displayMenu();
			}
			
			@Override
			public String toString() {
				return getClass().getName();
			}
		});
		commands.put("exit", new Close(m,ui));
		return commands;
	}
	

}
