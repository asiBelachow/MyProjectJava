package presenter;

import java.io.IOException;

import model.Model;
import view.View;

public class CommandManger {
	
	Model model;
	View view;
	
	public CommandManger(Model model, View view) {
		this.model = model;
		this.view =view;
	}
	
	

	public Model getModel() {
		return model;
	}

	public void setModel(Model model) {
		this.model = model;
	}

	public View getView() {
		return view;
	}

	public void setView(View view) {
		this.view = view;
	}
	
	public HashMap<String,Command> getCommandMap(){
		
		
		
	}
	
	
	
	class GenerateMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.generateMaze3D(param[1], Integer.parseInt(param[2]), Integer.parseInt(param[3]), Integer.parseInt(param[4]));
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	
	class DirPathCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.dirPath(param[1]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class DisplayMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.displayMaze(param[1]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class DisplayCrossSectionCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.CrossSectionByDimention(Integer.parseInt(param[1]), param[2], param[3]);
			
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	
	class SaveMAzeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.saveMaze(param[1], param[2]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	
	class LoadMazeCommand implements Command{
		
		@Override
		public void doCommmand(String[] param) throws IOException {
			model.loadMaze(param[1], param[2]);
		}
		
		@Override
		public String toString() {
			return getClass().getName();
		}
	}
	class SolveMazeCommand implements Command{

		@Override
		public void doCommmand(String[] param) throws IOException {
			model.solveMaze(param[1], param[2]);

		}

		@Override
		public String toString() {
			return getClass().getName();
		}
	}
		
	

}
