package controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import allCommands.Command;
import allCommands.DirPath;
import allCommands.DisplayCrossSectionByDimension;
import allCommands.DisplayMaze;
import allCommands.DisplayMenu;
import allCommands.DisplaySolution;
import allCommands.DisplyListOfAllMaze;
import allCommands.GenerateMaze3D;
import allCommands.LoadMaze;
import allCommands.SaveMaze;
import allCommands.SolveMaze;
import model.Model;
import view.View;



public abstract class MyCommonController implements Controller {
	
	protected View v;
	
	protected Model m;
	
	protected HashMap<String, Command> commands;
	
	protected ExecutorService threadPool;
	
	
	public MyCommonController() {
		this.threadPool = Executors.newCachedThreadPool();
	}
	
	//-------------------------Functionality-------------------------//
	
	@Override
	public void setModel(Model m) {
		this.m = m;
	}
	
	@Override
	public void setView(View v) {
		this.v = v;
	}
	
	

	/**
	 * <h1>Sets the commands</h1><p>
	 * <i><ul>HashMap<String, Command> setCommands()<i><p>
	 * Set the HashMap with {@link Command} and key
	 * @return HashMap 
	 */
	public HashMap<String, Command> setCommands(){
		
		commands = new HashMap<String, Command>();

		commands.put("dir [^\n]+", new DirPath(m));
		commands.put("generate maze [A-Za-z0-9]+ [0-9]{1,2} [0-9]{1,2} [0-9]{1,2}", new GenerateMaze3D(m));
		commands.put("display [A-Za-z0-9]+", new DisplayMaze(m));
		commands.put("display cross section [0-9]{1,2} [A-Za-z0-9]+ [A-Za-z0-9]+", new DisplayCrossSectionByDimension(m));
		commands.put("save maze [A-Za-z0-9]+ [^\n]+", new SaveMaze(m));
		commands.put("load maze [^\n]+ [A-Za-z0-9]+", new LoadMaze(m));
		commands.put("solve [A-Za-z0-9]+ [A-Za-z0-9]+", new SolveMaze(m));
		commands.put("display solution [A-Za-z0-9]+", new DisplaySolution(m));
		commands.put("display menu", new DisplayMaze(m));
		commands.put("list maze", new DisplyListOfAllMaze(m));
		commands.put("menu", new DisplayMenu(m));
		return commands;
	}
	
	public HashMap<String, Command> getCommands(){
		return commands;
	}

	@Override
	public abstract void forwardCommand(String command, String[] param) throws IOException;

	@Override
	public abstract void setSolution(String solution);
	
	

}
