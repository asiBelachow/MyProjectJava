package view;


import java.io.BufferedReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Observable;



public class CLI extends Observable implements Closeable {
	
	private static final String EXIT_COMMAND = "exit";
	
	BufferedReader in;
	PrintWriter out;
	
	View v;
	
	
	//------------------------------Constructors-------------------------//
	
	/**
	 * <h1>CLI</h1><p>
	 * <i><ul>CLI(	BufferedReader in, PrintWriter out, HashMap<String,Command> map)<i><p>
	 * Initialize a CLI.
	 * @param in -  BufferedReader
	 * @param out - PrintWriter
	 * @param map - HashMap<String,Command>
	 */
	public CLI(	BufferedReader in, PrintWriter out) {
		this.in = in;
		this.out = out;
	
		
	}
	
	//-----------------------------setters and getters-------------------//

	public BufferedReader getIn() {
		return in;
	}

	public void setIn(BufferedReader in) {
		this.in = in;
	}

	public PrintWriter getOut() {
		return out;
	}

	public void setOut(PrintWriter out) {
		this.out = out;
	}

	
	

	
	//-------------------------Functionality-------------------------//
	
	public Command getCommand(String buffer){
		
		Iterator<String> iter = commandMap.keySet().iterator();
		while ( iter.hasNext()){
			String command = iter.next();
			if(buffer.matches(command)){
				return commandMap.get(command);
			}
		}
		
		return null;
		
	}
	
	
	public void displaySolution(Object args){
		out.println((String)args);
	}
	
	public void start(){
		Thread thread = new Thread(new Runnable() {
			
			@Override
			public void run() {
				
				try {
					String input = null;
					while(!(input=in.readLine()).equals(EXIT_COMMAND)){
					
					
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
				
			}
		} ); 
			
	}
	
	
	
	
	

	@Override
	public void close() throws IOException {
		if (out != null)
			out.close();
		if (in != null)
			in.close();
	}
	

}
