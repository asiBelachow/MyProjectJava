package view.gui;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import presenter.Properties;
import presenter.PropertiesHandler;
import view.dialogLoader.ClassGUIDialogLoader;


public class ServerGui extends BasicWindow{

	//------------------------------Data Members-------------------------//
	
	TableItem newClient;
	private int numOfClients;
	
	private Table clients;
	
	private Menu menuBar,fileMenu;
	
	private MenuItem fileMenuItem, settingsMenuItem,exitItem;
	
	private Group clientsGroup,buttonsGroup;
	
	private Button startServerButton, stopServerButton, disconnectClientButton,clearConsoleButton;
	
	private Text consoleText;
	
	private MyMessageBox msgError,msgInfo;
	
	private Properties properties;
	
	private Listener exitListener;
	
	//------------------------------Constructors-------------------------//
	
	/**
	 * <h1>ServerGui</h1><p>
	 * <i><ul>ServerGui(Properties properties)<i><p>
	 * Initialize a new GameGui.
	 * @param properties - server settings
	 */
	public ServerGui(Properties properties) {
		super(properties.getTitle(), properties.getWidth(), properties.getHeight());
		this.properties = properties;
		this.numOfClients = 0;
		msgInfo= new MyMessageBox(getShell(), SWT.ICON_INFORMATION | SWT.OK);
		msgError= new MyMessageBox(getShell(), SWT.ICON_ERROR | SWT.OK);
	}
	
	//-----------------------------Setters and Getters-------------------//
	
	/**
	 * <h1>getNumOfClients</h1><p>
	 * <i><ul>int getNumOfClients()<i><p>
	 * Get the  number of clients.
	 * @return number of clients
	 */
	public int getNumOfClients() {
		return numOfClients;
	}

	/**
	 * <h1>setNumOfClients</h1><p>
	 * <i><ul>void setNumOfClients(int numOfClients)<i><p>
	 * Set the  number of clients.
	 * @param numOfClients 
	 */
	public void setNumOfClients(int numOfClients) {
		this.numOfClients = numOfClients;
	}
	
	

	//-------------------------Functionality-------------------------//
	
	
	@Override
	protected void initWidgets() {
		
		
		shell.setLayout(new GridLayout(1, true));

		// menu
		menuBar = new Menu(shell, SWT.BAR);
		fileMenuItem = new MenuItem(menuBar, SWT.CASCADE);
		fileMenuItem.setText("File");

		fileMenu = new Menu(shell, SWT.DROP_DOWN);
		fileMenuItem.setMenu(fileMenu);

		settingsMenuItem = new MenuItem(fileMenu, SWT.PUSH);
		settingsMenuItem.setText("Settings");
		
		exitItem = new MenuItem(fileMenu, SWT.PUSH);
		exitItem.setText("Exit");
		exitItem.setEnabled(true);
		shell.setMenuBar(menuBar);
		
		
		clientsGroup = new Group(getShell(), SWT.SHADOW_ETCHED_IN);
		clientsGroup.setLayout(new GridLayout(1, true));
		clientsGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		clientsGroup.setText("Connected Clients :");
		
		clients = new Table(clientsGroup, SWT.BORDER | SWT.FULL_SELECTION | SWT.VIRTUAL |SWT.RESIZE |SWT.Resize | SWT.SINGLE | SWT.V_SCROLL | SWT.H_SCROLL);
		clients.setLayoutData(new GridData(GridData.FILL_BOTH));

		clients.setHeaderVisible(true);
		clients.setLinesVisible(true);
		
		TableColumn clientIDCol = new TableColumn(clients, SWT.CENTER);
		clientIDCol.setText("#");

		TableColumn clientIPCol = new TableColumn(clients, SWT.CENTER);
		clientIPCol.setText("IP Address");

		TableColumn clientStatusCol = new TableColumn(clients, SWT.CENTER);
		clientStatusCol.setText("Current Status");

		TableColumn clientLastCommandCol = new TableColumn(clients, SWT.CENTER);
		clientLastCommandCol.setText("Last Requested Command");

		TableColumn clientLastCommandParamsCol = new TableColumn(clients, SWT.CENTER);
		clientLastCommandParamsCol.setText("Command Params");
		
		TableColumn clientTotalNumCommandsCol = new TableColumn(clients, SWT.CENTER);
		clientTotalNumCommandsCol.setText("## Commands");
		
		clientIDCol.pack();
		clientIPCol.pack();
		clientStatusCol.pack();
		clientLastCommandCol.pack();
		clientLastCommandParamsCol.pack();
		clientTotalNumCommandsCol.pack();
		
		buttonsGroup = new Group(shell, SWT.SHADOW_ETCHED_IN);
		buttonsGroup.setLayout(new GridLayout(4, true));
		buttonsGroup.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
		buttonsGroup.setText("Actions :");
		
		startServerButton = new Button(buttonsGroup, SWT.PUSH);
		startServerButton.setText("Start Server");
		startServerButton.setEnabled(true);
		startServerButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				setCommandAndNotify("start server",null);
				startServerButton.setEnabled(false);
				stopServerButton.setEnabled(true);
				disconnectClientButton.setEnabled(true);
				
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				
				
			}
		});
		
		stopServerButton = new Button(buttonsGroup, SWT.PUSH);
		stopServerButton.setText("Stop Server");
		stopServerButton.setEnabled(false);
		stopServerButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				setCommandAndNotify("stop server", null);
				stopServerButton.setEnabled(false);
				disconnectClientButton.setEnabled(false);
				startServerButton.setEnabled(true);
		
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		disconnectClientButton = new Button(buttonsGroup, SWT.PUSH);
		disconnectClientButton.setText("Remove Client");
		disconnectClientButton.setEnabled(false);
		disconnectClientButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				if (clients.getSelectionCount() == 1)
					setCommandAndNotify("disconnect client", clients.getSelection()[0].getText());
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
				
				
			}
		});
		
	
		clearConsoleButton = new Button(buttonsGroup, SWT.PUSH);
		clearConsoleButton.setText("Clear Console");
		clearConsoleButton.setEnabled(true);
		clearConsoleButton.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				consoleText.setText("");	
			}
			
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {
	
			}
		});
		// console
		Group consoleGroup = new Group(shell, SWT.SHADOW_ETCHED_IN);
		consoleGroup.setLayout(new GridLayout(1, true));
		consoleGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		consoleGroup.setText("Console :");

		consoleText = new Text(consoleGroup, SWT.READ_ONLY | SWT.MULTI | SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
		consoleText.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		consoleText.setBackground(new Color(display, 255, 255, 255));
		//consoleText.setFont(new Font(getDisplay(), "Ravie", 15 , SWT.COLOR_GREEN));
		
		
		settingsMenuItem.addSelectionListener(new SelectionListener() {
			
			@Override
			public void widgetSelected(SelectionEvent arg0) {
				
				ClassGUIDialogLoader dialog = new ClassGUIDialogLoader(shell, SWT.DIALOG_TRIM | SWT.SYSTEM_MODAL,Properties.class, properties);
				dialog.setSubmitListener(new SelectionListener() {
					@Override
					public void widgetSelected(SelectionEvent arg0) {
						Properties newProperties = (Properties) dialog.getInstance();
						try{
							PropertiesHandler.writeProperties(newProperties, "resources/properties/properties.xml");
						}catch (Exception e) {
							displayInConsole("Couldn't write new properties");
							msgError.showMessage(getDisplay(), "Error","Couldn't write new properties");
							return;
						}
						
						displayInConsole("Please restart the game for the applied changes to take effect");
						msgInfo.showMessage(getDisplay(), "Attention", "Please restart the game for the applied changes to take effect");
					}

					@Override
					public void widgetDefaultSelected(SelectionEvent arg0) {
					}
				});
				dialog.showDialog();
			}
			@Override
			public void widgetDefaultSelected(SelectionEvent arg0) {			
			}
		});
		
		exitListener = new Listener() {

			@Override
			public void handleEvent(Event e) {
				MessageBox messageBox = new MessageBox(shell, SWT.ICON_QUESTION | SWT.YES | SWT.NO );
				messageBox.setText("Exit");
				messageBox.setMessage("Are you sure you want to close the server?");
				int buttonID = messageBox.open();
				switch (buttonID) {
				case SWT.YES:
					close();
					e.doit =true;
					break;
				case SWT.NO:
					e.doit =false;
					break;
				default:
					e.doit =false;
					break;
				}

			}
		};
		
		exitItem.addListener(SWT.Selection, exitListener);
		getShell().addListener(SWT.Close, exitListener) ;

		
	}
	
	@Override
	public void start() {
		run();
		
	}

	@Override
	public void close() {
		String command = "stop server";
		setCommandAndNotify(command, command.split(" "));
		closeWidgets();
		getShell().dispose();
		
	}

	
	

	@Override
	public void addClient(String[] client) {
		Display.getDefault().syncExec(new Runnable() {
		    public void run() {
				TableItem newClient = new TableItem(clients, getNumOfClients());
				newClient.setText(client);
		    }
		});
	}
	
	

	@Override
	public void displayInConsole(String str) {
		Display.getDefault().syncExec(new Runnable() {
		    public void run() {
		    	consoleText.append(str+"\n");
		    }
		});
		
	}
	
	public void removeClient(String clientId) {
		Display.getDefault().syncExec(new Runnable() {
			
			@Override
			public void run() {
				for (TableItem item : clients.getItems()) {
					if (item.getText(0).equals(clientId)) {
						// found client
						clients.remove(clients.indexOf(item));
						return;
					}
				}
			}
		});		
	}
	
	@Override
	public void updateClient(String[] fields) {
		Display.getDefault().syncExec(new Runnable() {
			
			@Override
			public void run() {
				for (TableItem item : clients.getItems()) {
					if (item.getText(0).equals(fields[0])) {
						item.setText(fields);
					}
				}	
			}
		});	
	}
	
	/**
	 * <h1>closeWidgets</h1><p>
	 * <i><ul>void closeWidgets()<i><p>
	 * Dispose all widgets
	 */
	public void closeWidgets(){

		if(newClient!=null && !newClient.isDisposed())
			newClient.dispose();
		if(clients!=null && !clients.isDisposed())
			clients.dispose();
		if(menuBar!=null && !menuBar.isDisposed())
			menuBar.dispose();
		if(fileMenu!=null && !fileMenu.isDisposed())
			fileMenu.dispose();
		if(fileMenuItem!=null && !fileMenuItem.isDisposed())
			fileMenuItem.dispose();
		if(clientsGroup!=null && !clientsGroup.isDisposed())
			clientsGroup.dispose();
		if(buttonsGroup!=null && !buttonsGroup.isDisposed())
			buttonsGroup.dispose();
		if(startServerButton!=null && !startServerButton.isDisposed())
			startServerButton.dispose();
		if(stopServerButton!=null && !stopServerButton.isDisposed())
			stopServerButton.dispose();
		if(disconnectClientButton!=null && !disconnectClientButton.isDisposed())
			disconnectClientButton.dispose();
		if(consoleText!=null && !consoleText.isDisposed())
			consoleText.dispose();
		
	}
	
	@Override
	public void serverStoppedEventHandler() {
		disconnectClientButton.setEnabled(false);
		startServerButton.setEnabled(true);
		disconnectClientButton.setEnabled(false);
	}
	

	

}
