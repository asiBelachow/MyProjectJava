package presenter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;

import model.Model;
import view.View;

public abstract class AbstractPresenter implements Observer,Presenter {
	
	//------------------------------Data Members-------------------------//
	
	Model model;
	View view;
	CommandManger commandManger;
	protected HashMap<String, Command> commands;

	
	//------------------------------Constructors-------------------------//
	
	public void setCommands(HashMap<String, Command> commands) {
		this.commands = commands;
	}

	public AbstractPresenter(Model model, View view) {
		this.model = model;
		this.view = view;
		this.commandManger = new CommandManger(model, view);
		initCommands();

		
	}
	
	//-----------------------------setters and getters-------------------//
	
	/**
	 * <h1>Set model</h1><p>
	 * <i><ul>void setModel(Model m)<i><p>
	 * Set the data member {@link Model} m
	 * @param m - the  model
	 */
	public void setModel(Model model){
		this.model = model;
	}
	
	
	/**
	 * <h1>Set view</h1><p>
	 * <i><ul>void setView(View v)<i><p>
	 * Set the data member {@link View} v
	 * @param v - the view 
	 */
	public void setView(View view){
		this.view = view;
		
	}
	
	public HashMap<String, Command> getCommands() {
		return commands;
	}

	
	//-------------------------Functionality-------------------------//

	@Override
	public void initCommands(){
		
	
	
	}
	
	@Override
	public abstract void update(Observable o, Object args);


	

}
