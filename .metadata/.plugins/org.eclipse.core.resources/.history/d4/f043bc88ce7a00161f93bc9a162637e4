package view;


import java.io.BufferedReader;
import java.io.Closeable;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Observable;



/**
 * <h1>The Class CLI</h1><p>
 * This class define the 
 */
public class CLI extends Observable implements Closeable {
	
	private static final String EXIT_COMMAND = "exit";
	
	BufferedReader in;
	
	PrintWriter out;
	
	View v;
	
	
	//------------------------------Constructors-------------------------//
	
	/**
	 * <h1>CLI </h1><p>
	 * <i><ul>CLI(BufferedReader in, PrintWriter out)<i><p>
	 * Initialize a CLI.
	 * @param in -  BufferedReader
	 * @param out - PrintWriter
	 */
	public CLI(	BufferedReader in, PrintWriter out) {
		this.in = in;
		this.out = out;
	
	}
	
	//-----------------------------setters and getters-------------------//

	public BufferedReader getIn() {
		return in;
	}

	public void setIn(BufferedReader in) {
		this.in = in;
	}

	public PrintWriter getOut() {
		return out;
	}

	public void setOut(PrintWriter out) {
		this.out = out;
	}

	
	
	
	//-------------------------Functionality-------------------------//
	

	
	public void start(){
		Thread thread = new Thread(new Runnable() {
			
			@Override
			public void run() {
				
				try {
					String input = in.readLine();
					while(!(input.equals(EXIT_COMMAND))){
						setChanged();
						notifyObservers(input);
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
				
			}
		}); 
		thread.start();
			
	}
	
	
	
	
	

	@Override
	public void close() throws IOException {
		if (out != null)
			out.close();
		if (in != null)
			in.close();
	}
	

}
