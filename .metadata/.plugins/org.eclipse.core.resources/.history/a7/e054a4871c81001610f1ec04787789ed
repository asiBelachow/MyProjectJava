package view.widgets;



import java.util.ArrayList;
import java.util.Random;
import javax.sound.sampled.Clip;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;

import algorithms.maze3DGenerators.Maze3D;
import algorithms.maze3DGenerators.Position;

public class Maze3DWidget extends MazeDisplayer{
	
	Position position;
	Clip s;
	ImageGameCharacter character;
	Image winImage;
	Image goalImage;
	Maze3D maze;
	
	private Color black,black2, green, red;
	
	private ArrayList<Color> floorColors;
	
	private double d;
	private int w, h;
	
	public Maze3DWidget(Composite parent, int style,Maze3D maze) {
		
		super(parent, style);
		
		this.maze = maze;
		character = new ImageGameCharacter(this, SWT.NONE, new Image(getDisplay(), "data/image/character_image.png"));
		winImage = new Image(getDisplay(), "data/image/win_image.jpg");
		goalImage = new Image(getDisplay(), "dada/image/goal_image.png");
		position = new Position();
		
		setCharacterPosition(maze.getStart());
		setBackground(new Color(null, 255, 255, 255));
		
		black = new Color(getDisplay(), 0, 0, 0);
		black2 = new Color(getDisplay(), 64, 64, 64);
		green = new Color(getDisplay(), 0, 255, 0);
		red = new Color(getDisplay(), 255, 0, 0);
		
		floorColors = initDistinctFloorColors(maze.getzAxis());
		

	
		addPaintListener(new PaintListener() {
			
			@Override
			public void paintControl(PaintEvent e) {

				try {
					if(maze != null){

						e.gc.setAntialias(SWT.ON);

						int width = getSize().x;
						int height = getSize().y;

						int mx = width / 2;

						double w = (double) width / getMaze().getArray()[1][1].length;
						double h = (double) height / getMaze().getArray()[1].length;

						for (int i = 0; i <getMaze().getArray()[position.getZ()][i].length; i++) {
							
							
							double w0 = 0.7 * w + 0.3 * w * i / getMaze().getArray()[1].length;
							double w1 = 0.7 * w + 0.3 * w * (i + 1) / getMaze().getArray()[1].length;
							double start = mx - w0 * getMaze().getArray()[1][i].length / 2;
							double start1 = mx - w1 * getMaze().getArray()[1][i].length / 2;
							for (int j = 0; j < getMaze().getArray()[position.getZ()][i].length; j++) {
								double[] dpoints = { start + j * w0, i * h, start + j * w0 + w0, i * h, start1 + j * w1 + w1,
										i * h + h, start1 + j * w1, i * h + h };
								double cheight = h / 2;

								if (getMaze().getArray()[1][i][j] != 0)
									paintCube(dpoints, cheight, e);
								
								if (i == character.getX() && j== character.getY() )
									character.paint(e, (int) Math.round(dpoints[0]), (int) Math.round(dpoints[1] - cheight / 2),
											(int) Math.round((w0 + w1) / 2), (int) Math.round(h));
								
								if(i == maze.getEnd().getX() && j== maze .getEnd().getZ())
									e.gc.drawImage(goalImage, 0, 0, 256, 256, (int) Math.round(dpoints[0]), (int) Math.round(dpoints[1] - cheight / 2), (int) Math.round((w0 + w1) / 2), (int) Math.round(h));

							/*	if (i == getMaze().getxAxis() && j == getMaze().getyAxis()) {
							
									e.gc.fillOval((int) Math.round(dpoints[0]), (int) Math.round(dpoints[1] - cheight / 2),
											(int) Math.round((w0 + w1) / 2), (int) Math.round(h));
							
									e.gc.fillOval((int) Math.round(dpoints[0] + 2),
											(int) Math.round(dpoints[1] - cheight / 2 + 2),
											(int) Math.round((w0 + w1) / 2 / 1.5), (int) Math.round(h / 1.5));
								
								}*/

							}
						}
					}

					e.gc.setForeground(new Color(null, 255, 0, 0));
					e.gc.drawString("Position: " + position, 0, 20);
				}catch (Exception e2) {

				}
				
				
				
				
				
				
				
				
				/*int width = getSize().x;
				int height = getSize().y;
				
				//Sets the anti-aliasing ON in order to get the drawing smhooter  value to the parameter, which must be one of SWT.DEFAULT, SWT.OFF or SWT.ON.
				e.gc.setAntialias(SWT.ON);
				e.gc.setFont(font);

				a = 0;
				int straightW = width / getMaze().getxAxis();
				w = (int) ((width - ((a * (getMaze().getyAxis() - 1)) * straightW)) / getMaze().getxAxis());

				h = height / getMaze().getxAxis();

				character.setWidth(w);
				character.setHeight(h);
				paintMaze(w, h, a, e);*/
			}
		});
		
		addDisposeListener(new DisposeListener() {
			
			@Override
			public void widgetDisposed(DisposeEvent arg0) {
				black.dispose();
				black2.dispose();
				green.dispose();
				red.dispose();
				character.dispose();
			}
		});
	}

	@Override
	public void setCharacterPosition(Position p) {
		position = p;
		System.out.println(p);
		moveCharacter(p);
	}
	
	private boolean moveCharacter(Position p) {
		// if at end position
		if (getMaze().getEnd().equals(p)) {
			triggerWin();
			dispose();
		}

		else if ( getMaze().getPossibleMoves(position).contains(p)){
			
			this.position = p;
			//character.setAxis1((int) Math.round((p.getX() + d) * w));
			//character.setAxis2((p.getY() + 1) * h);
			//playMusic(new File("data/music/move.wav"), s);
			redraw();
			
			return true;
		}
		return false;
		
	/*	// if not at end position - just move
		else if (getMaze().checkPositionBounds(p) && getMaze().getValueByIndex(p) == 0) {

			// sets the character position holder to the new position(because
			// move succeeded)
			this.position = p;
			// set accurate character position in relation to the current
			// width/height cell ratio
			character.setAxis1((int) Math.round((p.getX() + d) * w));
			character.setAxis2((p.getY() + 1) * h);
			
			redraw();
			
			return true;
		}
		return false;*/
	}
	

	public Maze3D getMaze() {
		return maze;
	}

	public void setMaze(Maze3D maze) {
		this.maze = maze;
	}

	@Override
	public boolean moveUp() {
		Position newPos = new Position(position);
		newPos.setZ(newPos.getZ() + 2);

		return moveCharacter(newPos);
	}

	@Override
	public boolean moveDown() {
		Position newPos = new Position(position);
		newPos.setZ(newPos.getZ() + 2);

		return moveCharacter(newPos);
	}

	@Override
	public boolean moveLeft() {
		Position newPos = new Position(position);
		newPos.setY(newPos.getY() - 2);

		return moveCharacter(newPos);
	}

	@Override
	public boolean moveRight() {
		Position newPos = new Position(position);
		newPos.setY(newPos.getY() + 2);

		return moveCharacter(newPos);
	}

	@Override
	public boolean moveFront() {
		Position newPos = new Position(position);
		newPos.setX(newPos.getX() + 2);

		return moveCharacter(newPos);
	}

	@Override
	public boolean moveBack() {
		Position newPos = new Position(position);
		newPos.setX(newPos.getX() - 2);

		return moveCharacter(newPos);
	}
	
	private ArrayList<Color> initDistinctFloorColors(int numOfFloors) {
		ArrayList<Color> colors = new ArrayList<Color>();

		Random rnd = new Random();
		for (int i = 0; i < numOfFloors; i++)
			colors.add(new Color(getDisplay(), rnd.nextInt(256), rnd.nextInt(256), rnd.nextInt(256)));

		return colors;
	}
	
	
	public void paintCube(double[] p, double h, PaintEvent e) {
		int[] f = new int[p.length];
		for (int k = 0; k < f.length; f[k] = (int) Math.round(p[k]), k++);

		int[] r = f.clone();
		for (int k = 1; k < r.length; r[k] = f[k] - (int) (h), k += 2);
		
		int[] fr = { r[6], r[7], r[4], r[5], f[4], f[5], f[6], f[7] };
		int[] right = { r[2], r[3], f[2], f[3], f[4], f[5], r[4], r[5] };
		int[] left = { r[0], r[1], f[0], f[1], f[6], f[7], r[6], r[7] };
		e.gc.setLineWidth(SWT.NONE);
		
		e.gc.setBackground(floorColors.get(position.getZ()));
		e.gc.drawPolygon(right);
		e.gc.drawPolygon(left);
		e.gc.fillPolygon(fr);
		
		e.gc.setBackground(black2);
		e.gc.drawPolygon(right);
		e.gc.drawPolygon(left);
		e.gc.fillPolygon(fr);
		
		e.gc.setBackground(floorColors.get(position.getZ()));
		e.gc.fillPolygon(r);
		
		e.gc.setBackground(floorColors.get(position.getZ()));
		e.gc.drawPolygon(r);
		
		

	}
	
/*	 private void paintMaze(int w, int h, double a, PaintEvent e) {
			for (int axis1 = 0; axis1 < getMaze().getxAxis() ; axis1++) {
				d = 0;
				for (int axis2 = getMaze().getyAxis() - 1; axis2 >= 0 ; axis2--) {

					if (getMaze().getValueByIndex(position.getY(), axis1, axis2) != 0) {
						A[0] = (int) Math.round((axis1 + d) * w);
						A[1] = (axis2 + 1) * h;
						B[0] = (int) Math.round((axis1 + d + 1) * w);
						B[1] = (axis2 + 1) * h;
						C[0] = (int) Math.round((axis1 + d + 1 + a) * w);
						C[1] = axis2 * h;
						D[0] = (int) Math.round((axis1 + d + a) * w);
						D[1] = axis2 * h;
						E[0] = (int) Math.round((axis1 + d + 1 + a) * w);
						E[1] = (int) Math.round((axis2 + 0.5) * h);
						F[0] = (int) Math.round((axis1 + d + 1) * w);
						F[1] = (int) Math.round((axis2 + 1.5) * h);
						G[0] = (int) Math.round((axis1 + d) * w);
						G[1] = (int) Math.round((axis2 + 1.5) * h);
						// top plain
						e.gc.setAlpha(150);
						e.gc.setBackground(floorColors.get(position.getZ()));
						e.gc.setLineWidth(SWT.LINE_SOLID);
						//e.gc.setLineStyle(SWT.LINE_SOLID);
						
						 * //take care of character disappearing between cubes
						 * if(axis1==pos.getY() && axis2==pos.getZ()-1)
						 * e.gc.setAlpha(150);
						 
						int[] topPlain = new int[] { A[0],A[1],B[0],B[1],C[0],C[1],D[0],D[1] };
						e.gc.drawPolygon(topPlain);
						e.gc.fillPolygon(topPlain);
						// if to your right there is empty space then draw the right
						// plain
						if (axis1 + 1 == getMaze().getxAxis() || axis1 + 1 < getMaze().getxAxis()
								&& getMaze().getValueByIndex(position.getZ(), axis1 + 1, axis2) == 0) {
							// right plain
							e.gc.setAlpha(200);
							e.gc.setBackground(black2);
							int[] rightPlain = new int[] { B[0],B[1],C[0],C[1],E[0],E[1],F[0],F[1] };
							e.gc.fillPolygon(rightPlain);
						}

						// if to your bottom there is empty space then draw the
						// bottom plain
						if (axis2 + 1 == getMaze().getyAxis() || axis2 + 1 < getMaze().getyAxis()
								&& getMaze().getValueByIndex(position.getZ(), axis1, axis2 + 1) == 0) {
							// bottom plain
							e.gc.setAlpha(200);
							e.gc.setBackground(black);
							int[] bottomPlain = new int[] { A[0],A[1],B[0],B[1],F[0],F[1],G[0],G[1] };
							e.gc.fillPolygon(bottomPlain);
						}
					}
					// paints character and dimensions hints
					if (axis1 == position.getX() && axis2 == position.getY()) {

						paintCharacterAndDimensionHints(e.gc, axis1, axis2, d, a, w, h);
					}

					d += a;
				}
			}
		}
	 
	 
		private void paintCharacterAndDimensionHints(GC gc, int axis1, int axis2, double d, double a, int w, int h) {
			// if both dimensions exist and both are vacant
			if (position.getZ() - 1 >= 0 && getMaze().getValueByIndex(position.getZ() - 1, position.getX(), position.getY()) == 0
					&& position.getZ() + 1 < getMaze().getzAxis()
					&& getMaze().getValueByIndex(position.getZ() + 1, position.getX(), position.getY()) == 0) {
				drawCube(gc, axis1, axis2 - 1, false, true, null, green, true, false, null, null, true, false, null, null,
						false, true, null, red, true, false, null, null, true, false, null, null);
				// e.gc.drawImage(vortexImage, 0, 0, 200, 200, (int)
				// Math.round((axis1+d+a)*w),(axis2+1)*h, w, h);
			} else {
				// if exists lower dimension AND it is vacant - draw it
				// transparently
				if (position.getZ() - 1 >= 0 && getMaze().getValueByIndex(position.getZ() - 1, position.getX(), position.getY()) == 0) {
					drawCube(gc, axis1, axis2 - 1, true, false, null, null, true, false, null, null, true, false, null,
							null, false, true, null, red, true, false, null, null, true, false, null, null);
				}
				// if exists upper dimension AND it is vacant - draw it
				// transparently
				if (position.getZ() + 1 < getMaze().getzAxis()
						&& getMaze().getValueByIndex(position.getZ() + 1, position.getX(), position.getY()) == 0) {
					drawCube(gc, axis1, axis2 - 1, false, true, null, green, true, false, null, null, true, false, null,
							null, true, false, null, null, true, false, null, null, true, false, null, null);
					 //e.gc.drawImage(vortexImage, 0, 0, 200, 200, (int)
					// Math.round((axis1+d+a)*w),axis2*h, w, h);
				}
			}
			// *CHARACTER PAINTING*
			gc.setAlpha(255);
			// character.drawCharacter(gc,(int)Math.round((axis1+d)*w),(axis2+1)*h,
			// w, h);
			character.setAxis1((int) Math.round((axis1 + d) * w));
			character.setAxis2((axis2) * h);
			character.redraw();
			// *END CHARACTER PAINT*
		}

		private void drawCube(GC gc, int axis1, int axis2, boolean topPlainDraw, boolean topPlainFill,
				Color topPlainDrawColor, Color topPlainFillColor, boolean rightPlainDraw, boolean rightPlainFill,
				Color rightPlainDrawColor, Color rightPlainFillColor, boolean frontPlainDraw, boolean frontPlainFill,
				Color frontPlainDrawColor, Color frontPlainFillColor, boolean bottomPlainDraw, boolean bottomPlainFill,
				Color bottomPlainDrawColor, Color bottomPlainFillColor, boolean backPlainDraw, boolean backPlainFill,
				Color backPlainDrawColor, Color backPlainFillColor, boolean leftPlainDraw, boolean leftPlainFill,
				Color leftPlainDrawColor, Color leftPlainFillColor) {
			gc.setAlpha(100);

			// top
			if (topPlainFill) {
				if (topPlainFillColor != null)
					gc.setBackground(topPlainFillColor);
				gc.fillPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + 1) * w), (axis2 + 1) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2) * h, (int) Math.round((axis1 + d + a) * w), (axis2) * h });
			}
			if (topPlainDraw) {
				if (topPlainDrawColor != null)
					gc.setForeground(topPlainDrawColor);
				gc.drawPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + 1) * w), (axis2 + 1) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2) * h, (int) Math.round((axis1 + d + a) * w), (axis2) * h });
			}
			// right
			if (rightPlainFill) {
				if (rightPlainFillColor != null)
					gc.setBackground(rightPlainFillColor);
				gc.fillPolygon(new int[] { (int) Math.round((axis1 + d + 1) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + 1 + a) * w), (axis2) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d + 1) * w), (axis2 + 2) * h });
			}
			if (rightPlainDraw) {
				if (rightPlainDrawColor != null)
					gc.setForeground(rightPlainDrawColor);
				gc.drawPolygon(new int[] { (int) Math.round((axis1 + d + 1) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + 1 + a) * w), (axis2) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d + 1) * w), (axis2 + 2) * h });
			}
			// front
			if (frontPlainFill) {
				if (frontPlainFillColor != null)
					gc.setBackground(frontPlainFillColor);
				gc.fillPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + 1) * w), (axis2 + 1) * h, (int) Math.round((axis1 + d + 1) * w),
						(axis2 + 2) * h, (int) Math.round((axis1 + d) * w), (axis2 + 2) * h });
			}
			if (frontPlainDraw) {
				if (frontPlainDrawColor != null)
					gc.setForeground(frontPlainDrawColor);
				gc.drawPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + 1) * w), (axis2 + 1) * h, (int) Math.round((axis1 + d + 1) * w),
						(axis2 + 2) * h, (int) Math.round((axis1 + d) * w), (axis2 + 2) * h });
			}
			// bottom
			if (bottomPlainFill) {
				if (bottomPlainFillColor != null)
					gc.setBackground(bottomPlainFillColor);
				gc.fillPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 2) * h,
						(int) Math.round((axis1 + d + 1) * w), (axis2 + 2) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d + a) * w), (axis2 + 1) * h });
			}
			if (bottomPlainDraw) {
				if (bottomPlainDrawColor != null)
					gc.setForeground(bottomPlainDrawColor);
				gc.drawPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 2) * h,
						(int) Math.round((axis1 + d + 1) * w), (axis2 + 2) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d + a) * w), (axis2 + 1) * h });
			}
			// back
			if (backPlainFill) {
				if (backPlainFillColor != null)
					gc.setBackground(backPlainFillColor);
				gc.fillPolygon(new int[] { (int) Math.round((axis1 + d + a) * w), (axis2) * h,
						(int) Math.round((axis1 + d + 1 + a) * w), (axis2) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d + a) * w), (axis2 + 1) * h });
			}
			if (backPlainDraw) {
				if (backPlainDrawColor != null)
					gc.setForeground(backPlainDrawColor);
				gc.drawPolygon(new int[] { (int) Math.round((axis1 + d + a) * w), (axis2) * h,
						(int) Math.round((axis1 + d + 1 + a) * w), (axis2) * h, (int) Math.round((axis1 + d + 1 + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d + a) * w), (axis2 + 1) * h });
			}
			// left
			if (leftPlainFill) {
				if (leftPlainFillColor != null)
					gc.setBackground(leftPlainFillColor);
				gc.fillPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + a) * w), (axis2) * h, (int) Math.round((axis1 + d + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d) * w), (axis2 + 2) * h });
			}
			if (leftPlainDraw) {
				if (leftPlainDrawColor != null)
					gc.setForeground(leftPlainDrawColor);
				gc.drawPolygon(new int[] { (int) Math.round((axis1 + d) * w), (axis2 + 1) * h,
						(int) Math.round((axis1 + d + a) * w), (axis2) * h, (int) Math.round((axis1 + d + a) * w),
						(axis2 + 1) * h, (int) Math.round((axis1 + d) * w), (axis2 + 2) * h });
			}
		}*/

}
